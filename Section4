Lecture 1:
VrHeadModel::
--VrHeadModel is a utility module in React 360 that simplifies the process of obtaining
the current orientation of the headset.

--Since the user is moving around in a VR space,
when the desired feature requires that an object or piece of text should be placed in
front of or with respect to the user's current orientation, it becomes necessary to know
exactly where the user is currently gazing.

--we will use this to show the game completed message to the
user in front of their view, no matter where they end up turning to from their initial
position.
--For example, the user may be looking up or down when collecting the final
object, and the completed message should pop up wherever the user is gazing.

--To implement this, we will retrieve the current head matrix as an array of numbers
using getHeadMatrix() from VrHeadModel, and set it as a value for the transform
property in the style attribute of the View component containing the game completed
message.

Loading assets::
--In order to load any static asset files such as image or audio files in the code, we can
utilize the asset method in React 360.

--This asset() functionality in React 360 allows
us to retrieve external resource files, including audio and image files.

--we will place the sound audio files for the game in the static_assets
folder, to be retrieved using asset() for each audio added to the game

--we will integrate
different features for the VR game such as setting the background scene, playing
audio, adding styles, loading static files, and retrieving the user orientation.

Lecture 2:
React 360 input events::
--In order to make the game interface interactive, we will utilize some of the input
event handlers exposed in React 360.
--Input events are collected from mouse,
keyboard, touch, and gamepad interactions, and also with the gaze button click on a
VR headset.

--The specific input events we will work with are the onEnter, onExit, and onClick
events

--onEnter: This event is fired whenever the platform cursor begins
intersecting with a component. We will capture this event for the VR
objects in the game, so the objects can start rotating around the y axis when
the platform cursor enters the specific object

--onExit: This event is fired whenever the platform cursor stops intersecting
with a component.
--we
will use it to stop rotating the VR object just exited.

--onClick: The onClick event is used with the VrButton component, and
is fired when there is click interaction with VrButton. We will use this to
set click event handlers on the VR objects, and also on the game complete
message to redirect the user out of the VR application to a link containing a
list of games.

--we will apply 3D world concepts to determine how to set the game world with equirectangular panoramic images, and position VR
objects in this world based on the 3D coordinate system.

Lecture 3:
Defining game details::
--Each game in MERN VR Game will be defined in a common data structure that the
React 360 application will also adhere to when rendering the individual game details.

--we will discuss the data structure for capturing a game's
details, and then highlight the difference between using static game data and
dynamically loaded game data.

Game data structure::
--The game data will consist of details such as the game's name, a URL pointing to the
location of the equirectangular image for the game world, and two arrays containing
details for each VR object to be added to the game world.

The following list indicates the fields corresponding to the game data attributes:::
--name: A string representing the name of the game
--world: A string with the URL pointing to the equirectangular image either hosted on cloud storage, CDNs, or stored on MongoDB
--answerObjects: An array of JavaScript objects containing details of the VR objects that can be collected by the player
--wrongObjects: An array of JavaScript objects containing details of the other VR objects to be placed in the VR world that cannot be collected by
the player.
--The arrays containing the VR object details will store properties of each object to be added to the 3D world in the game.

Lecture 3:
Details of VR objects::
--The two arrays in the game data structure will store details of the VR objects to be
added in the game world