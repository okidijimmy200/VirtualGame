Lecture 1:
3D position – coordinates and transforms::
--We need to understand positioning and orientation in the VR world space, in order to
place 3D objects at the desired locations and to make the VR experience feel more
real.
--we will review the 3D coordinate system to help us to
determine the location of a virtual object in the 3D space, and the transform
capabilities in React 360, which will allow us to position, orient, and scale objects as
required.

3D coordinate system::
--For mapping in a 3D space, React 360 uses a three-dimensional meter-based
coordinate system that is similar to the OpenGL® 3D coordinate system. This allows
individual components to be transformed, moved, or rotated in 3D in relation to the
layout in their parent component.

--The 3D coordinate system used in React 360 is a right-handed system. This means the positive x axis is to the right, the positive y
axis points upward, and the positive z axis is backward. This provides a better mapping with common coordinate systems of the
world space in assets and 3D world modeling.

--While deciding where and how to place 3D objects in the 360-degree world, we will
have to set values according to this 3D coordinate system.

Lecture 2:
Transforming 3D objects::
--The position and orientation of a 3D object will be determined by its transform
properties, which will have values corresponding to the 3D coordinate system. In the
following screenshot, the same 3D book object is placed in two different positions and
orientations by changing the transform properties in the style attribute of a React
360 Entity component that is rendering the 3D object.

--This transform feature is based on the transform style used in React, which React 360
extends to be fully 3D, considering the x-y-z axes. The transform properties are
added to the Entity components in the style attribute as an array of keys and
values in the following form:
style={{ ...
transform: [
{TRANSFORM_COMMAND: TRANSFORM_VALUE},
...
]
... }}

--The transform commands and values that are relevant to the 3D objects to be placed
in our games are translate [x, y, z], with values in meters; rotate [x, y,
z], with values in degrees; and scale, to determine the size of the object across all
axes. We can also utilize the matrix command instead, which accepts an array of 16
numbers representing the translation, rotation, and scale values.

--We will utilize these transform properties to position and orient 3D objects according
to the 3D coordinate system while placing objects in the game world built using React
360.

Lecture 2:
React 360 components::
--React 360 provides a range of components that can be used out of the box to create the
VR user interface for the game. This range consists of basic components available
from React Native and also VR-specific components that will allow you to incorporate
the interactive 3D objects in the VR game.

Core components::
--The core components in React 360 include two of React Native's built-in components
– the Text and View components. In the game, we will use these two components to
add content to the game world.

View::
--The View component is the most fundamental component for building a user
interface in React Native, and it maps directly to the native view equivalent on
whatever platform React Native is running on. In our case, since the application will
render in the browser, it will map to a <div> element in the browser.
--The View component is typically used as a container for other components; it can be
nested inside other views and can have zero-to-many children of any type.
We will use View components to hold the game world view and add 3D object
entities and text to the game

Text::
--The Text component is a React Native component for displaying text, and we will
use it to render strings in a 3D space by placing Text components inside View
components.

--We will compose the game world using these two React Native components, along
with other React 360 components to integrate VR features into the game.

Components for the 3D VR experience::
--React 360 provides a set of its own components to create the VR experience.
Specifically, we will use the Entity component to add 3D objects and a VrButton
component to capture clicks from the user.

Entity::
--In order to add 3D objects to the game world, we will use the Entity component,
which allows us to render 3D objects in React 360.

<Entity
source={{
obj: {uri: "http://linktoOBJfile.obj "},
mtl: {uri: "http://linktoMTLfile.obj "}
}}
/>

--Files containing the specific 3D object's information are added to the Entity
component using a source attribute. The source attribute takes an object of keyvalue
pairs to map resource file types to their locations.

--React 360 supports the
Wavefront OBJ file format, which is a common representation for 3D models.

--in
the source attribute, the Entity component supports the following keys:
obj: The location of an OBJ-formatted model
mtl: The location of an MTL-formatted material (the companion to OBJ).

--The values for the obj and mtl properties point to the location of these files and can
be static strings, asset() calls, require() statements, or URI strings.

NBs:
OBJ (or .OBJ) is a geometry definition file format that was first
developed by Wavefront Technologies. It is a simple data format
that represents 3D geometry as a list of vertices and texture vertices.
OBJ coordinates have no units, but OBJ files can contain scale
information in a human-readable comment line.

--MTL (or .MTL) are material library files that contains one or more
material definitions, each of which includes the color, texture, and
reflection map of individual materials. These are applied to the
surfaces and vertices of objects.

--The Entity component also takes transform property values in the style attribute,
so the objects can be placed at the desired positions and orientations in the 3D world
space.

--Game application, makers will add URLs pointing to the VR object
files (both .obj and .mtl) for each of their Entity objects in a game, and also specify
the transform property values to indicate where and how the 3D objects should be
placed in the game world.

--The Entity component will render 3D objects in the 3D world space. In order to
make these objects interactive, we need to use the VrButton component.

VrButton::
--The VrButton component in React 360 will help us to implement a simple, buttonstyle
onClick behavior for the objects and Text buttons that will be added to the
game.

--<VrButton onClick={this.clickHandler}>
<View>
<Text>Click me to make something happen!</Text>
</View>
</VrButton>

--This component is a helper for managing click-type interactions from the user across
different input devices. Input events that will trigger the click event include a
spacebar press on the keyboard, a left-click on the mouse, and a touch on the screen.

--The Entity and VrButton components from React 360 will allow us to render
interactive 3D objects in the game world.